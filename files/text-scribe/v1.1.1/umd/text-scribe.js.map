{"version":3,"sources":["text-scribe:///webpack/universalModuleDefinition","text-scribe:///text-scribe.js","text-scribe:///webpack/bootstrap c9d689013de0550e03d8","text-scribe:///./src/index.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","TextWriter","_ref","arguments","undefined","_ref$initialLevel","initialLevel","_ref$tab","tab","_ref$linesep","linesep","_lines","setLevel","setLinesep","setTab","_linesep","_tab","Array","apply","map","join","String","_currentLevel","level","currentLine","_currentLine","newLine","content","lineCount","push","amt","indent","text","_ensureCurrentLine","write","_startNewLine","writeline","writeLine","newline","endline","_this","_this2","line","_getIndentString"],"mappings":"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","file":"text-scribe.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"textScribe\"] = factory();\n\telse\n\t\troot[\"textScribe\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"textScribe\"] = factory();\n\telse\n\t\troot[\"textScribe\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * A Class for writing out plain text. Pretty simple, but surprisingly useful.\n */\nvar TextWriter = exports.TextWriter = function () {\n\n    /**\n     * Instantiate a new TextWriter, with the specified configuration\n     *\n     * :param NonNegativeInt initialLevel:  The initial indent level. Default is 0.\n     * :param String|NonNegativeInt tab:    What to use for a \"tab\" at the beginning\n     *      of lines. If a String, the indent will be created by concatenating an\n     *      appropriate number of copies of this string. If a number, it specifies the\n     *      number of ASCII space character (0x20) to use for each tab. Default is\n     *      a string of four spaces.\n     * :param String linesep:   The string to use to separate lines. Default is '\\n'.\n     */\n    function TextWriter() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            _ref$initialLevel = _ref.initialLevel,\n            initialLevel = _ref$initialLevel === undefined ? 0 : _ref$initialLevel,\n            _ref$tab = _ref.tab,\n            tab = _ref$tab === undefined ? '    ' : _ref$tab,\n            _ref$linesep = _ref.linesep,\n            linesep = _ref$linesep === undefined ? '\\n' : _ref$linesep;\n\n        _classCallCheck(this, TextWriter);\n\n        // eslint-disable-line no-magic-numbers\n        this._lines = [];\n        this.setLevel(initialLevel);\n        this.setLinesep(linesep);\n        this.setTab(tab);\n    }\n\n    _createClass(TextWriter, [{\n        key: 'getLinesep',\n        value: function getLinesep() {\n            return this._linesep;\n        }\n    }, {\n        key: 'setLinesep',\n        value: function setLinesep(linesep) {\n            this._linesep = linesep;\n            return this;\n        }\n    }, {\n        key: 'getTab',\n        value: function getTab() {\n            return this._tab;\n        }\n    }, {\n        key: 'setTab',\n        value: function setTab(tab) {\n            if (typeof tab === 'number') {\n                this._tab = Array.apply(null, Array(tab)).map(function () {\n                    return ' ';\n                }).join(''); // eslint-disable-line prefer-spread\n            } else {\n                this._tab = String(tab);\n            }\n            return this;\n        }\n    }, {\n        key: 'getLevel',\n        value: function getLevel() {\n            return this._currentLevel;\n        }\n    }, {\n        key: 'setLevel',\n        value: function setLevel() {\n            var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            // eslint-disable-line no-magic-numbers\n            this._currentLevel = level;\n            if (this._currentLevel < 0) {\n                // eslint-disable-line no-magic-numbers\n                this._currentLevel = 0;\n            }\n            return this;\n        }\n\n        /**\n         * Gets the current line, whether it actually exists or is null (or\n         * undefined if there are _no_ lines yet).\n         */\n\n    }, {\n        key: '_currentLine',\n        value: function _currentLine() {\n            return this._lines[this._lines.length - 1]; // eslint-disable-line no-magic-numbers\n        }\n\n        /**\n         * Get the last line if it exists. If it doesn't, create it as an empty\n         * but existing line with the current level as it's indent, and add it to the list.\n         * Either way, return it.\n         */\n\n    }, {\n        key: '_ensureCurrentLine',\n        value: function _ensureCurrentLine() {\n            var currentLine = this._currentLine();\n            if (currentLine) {\n                return currentLine;\n            } else {\n                var newLine = { level: this._currentLevel, content: [] };\n                var lineCount = this._lines.length;\n                if (lineCount) {\n                    this._lines[lineCount - 1] = newLine; // eslint-disable-line no-magic-numbers\n                } else {\n                    // First line\n                    this._lines.push(newLine);\n                }\n                return newLine;\n            }\n        }\n\n        /**\n         * Add a new null line to the end of the list. This means that it\n         * won't actually get an indent level until you start writing\n         * to it.\n         */\n\n    }, {\n        key: '_startNewLine',\n        value: function _startNewLine() {\n            this._lines.push(null);\n        }\n\n        /**\n         * Increase the indent level by the specified number of levels.\n         * Negative values work as well to decrease the indent, to a minimum\n         * level of 0. The default amount is 1 to indent by one level.\n         * Returns back `this` writer.\n         */\n\n    }, {\n        key: 'indent',\n        value: function indent() {\n            var amt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n            // eslint-disable-line no-magic-numbers\n            return this.setLevel(this._currentLevel += amt);\n        }\n\n        /**\n         * Decrease the indent level by the specified number of levels,\n         * to a minimum of 0.\n         * This simply negates the given value and passes the result to\n         * `indent`.\n         */\n\n    }, {\n        key: 'outdent',\n        value: function outdent() {\n            var amt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n            // eslint-disable-line no-magic-numbers\n            return this.indent(-amt);\n        }\n\n        /**\n         * Append the specified text to the current line.\n         *\n         * @return `this` Writer object.\n         */\n\n    }, {\n        key: 'write',\n        value: function write(text) {\n            this._ensureCurrentLine().content.push(text);\n            return this;\n        }\n\n        /**\n         * Append the specified text to the current line, and _then_\n         * start a new (empty) line.\n         *\n         * Default `text` parameter is an empty string, which has the effect\n         * of ending the current line.\n         *\n         * @return `this` Writer object.\n         */\n\n    }, {\n        key: 'writeline',\n        value: function writeline() {\n            var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n            this.write(text);\n            this._startNewLine();\n            return this;\n        }\n\n        /**\n         * A legacy alias for `writeline`.\n         */\n\n    }, {\n        key: 'writeLine',\n        value: function writeLine() {\n            return this.writeline.apply(this, arguments);\n        }\n\n        /**\n         * End the current line and a new null line after it.\n         * This is the same as calling `writeLine` with no argument.\n         *\n         * @return `this` Writer object.\n         */\n\n    }, {\n        key: 'newline',\n        value: function newline() {\n            return this.writeLine();\n        }\n\n        /**\n         * End the current line and add a blank line after it,\n         * leaving the cursor on the next line after the blank line.\n         *\n         * This is the same as calling `newline` twice in a row.\n         *\n         * @return `this` Writer object.\n         */\n\n    }, {\n        key: 'blankline',\n        value: function blankline() {\n            return this.newline().newline();\n        }\n\n        /**\n         * Ensures that the current line is ended (with `endline`), and then\n         * adds a new line.\n         *\n         * @return `this` Writer object.\n         */\n\n    }, {\n        key: 'skipline',\n        value: function skipline() {\n            return this.endline().newline();\n        }\n\n        /**\n         * Ensure that if the current line is non-null, it is\n         * ended. In other words, calling this several times in a row\n         * is the same as calling it once.\n         *\n         * @return `this` Writer object.\n         */\n\n    }, {\n        key: 'endline',\n        value: function endline() {\n            if (this._currentLine()) {\n                this.newline();\n            }\n            return this;\n        }\n    }, {\n        key: '_getIndentString',\n        value: function _getIndentString(level) {\n            var _this = this;\n\n            return Array.apply(null, Array(level)).map(function () {\n                return _this._tab;\n            }).join(''); // eslint-disable-line prefer-spread\n        }\n\n        /**\n         * Generate and return a string representing the text that has been written\n         * to the writer so far, using the current `linesep` and `tab` settings.\n         */\n\n    }, {\n        key: 'toString',\n        value: function toString() {\n            var _this2 = this;\n\n            return this._lines.map(function (line) {\n                if (line) {\n                    var level = line.level,\n                        content = line.content;\n\n                    return '' + _this2._getIndentString(level) + content.join('');\n                } else {\n                    return '';\n                }\n            }).join(this._linesep);\n        }\n    }]);\n\n    return TextWriter;\n}();\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// text-scribe.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c9d689013de0550e03d8","/**\n * A Class for writing out plain text. Pretty simple, but surprisingly useful.\n */\nexport class TextWriter {\n\n    /**\n     * Instantiate a new TextWriter, with the specified configuration\n     *\n     * :param NonNegativeInt initialLevel:  The initial indent level. Default is 0.\n     * :param String|NonNegativeInt tab:    What to use for a \"tab\" at the beginning\n     *      of lines. If a String, the indent will be created by concatenating an\n     *      appropriate number of copies of this string. If a number, it specifies the\n     *      number of ASCII space character (0x20) to use for each tab. Default is\n     *      a string of four spaces.\n     * :param String linesep:   The string to use to separate lines. Default is '\\n'.\n     */\n    constructor({initialLevel = 0, tab = '    ', linesep = '\\n'} = {}) {    // eslint-disable-line no-magic-numbers\n        this._lines = [];\n        this.setLevel(initialLevel);\n        this.setLinesep(linesep);\n        this.setTab(tab);\n    }\n\n    getLinesep() {\n        return this._linesep;\n    }\n\n    setLinesep(linesep) {\n        this._linesep = linesep;\n        return this;\n    }\n\n    getTab() {\n        return this._tab;\n    }\n\n    setTab(tab) {\n        if (typeof tab === 'number') {\n            this._tab = Array.apply(null, Array(tab)).map(() => ' ').join(''); // eslint-disable-line prefer-spread\n        }\n        else {\n            this._tab = String(tab);\n        }\n        return this;\n    }\n\n    getLevel() {\n        return this._currentLevel;\n    }\n\n    setLevel(level = 0) {   // eslint-disable-line no-magic-numbers\n        this._currentLevel = level;\n        if (this._currentLevel < 0) {   // eslint-disable-line no-magic-numbers\n            this._currentLevel = 0;\n        }\n        return this;\n    }\n\n    /**\n     * Gets the current line, whether it actually exists or is null (or\n     * undefined if there are _no_ lines yet).\n     */\n    _currentLine() {\n        return this._lines[this._lines.length - 1]; // eslint-disable-line no-magic-numbers\n    }\n\n    /**\n     * Get the last line if it exists. If it doesn't, create it as an empty\n     * but existing line with the current level as it's indent, and add it to the list.\n     * Either way, return it.\n     */\n    _ensureCurrentLine() {\n        const currentLine = this._currentLine();\n        if (currentLine) {\n            return currentLine;\n        }\n        else {\n            const newLine = {level: this._currentLevel, content: []};\n            const lineCount = this._lines.length;\n            if (lineCount) {\n                this._lines[lineCount - 1] = newLine;   // eslint-disable-line no-magic-numbers\n            }\n            else {\n                // First line\n                this._lines.push(newLine);\n            }\n            return newLine;\n        }\n    }\n\n    /**\n     * Add a new null line to the end of the list. This means that it\n     * won't actually get an indent level until you start writing\n     * to it.\n     */\n    _startNewLine() {\n        this._lines.push(null);\n    }\n\n    /**\n     * Increase the indent level by the specified number of levels.\n     * Negative values work as well to decrease the indent, to a minimum\n     * level of 0. The default amount is 1 to indent by one level.\n     * Returns back `this` writer.\n     */\n    indent(amt = 1) {       // eslint-disable-line no-magic-numbers\n        return this.setLevel(this._currentLevel += amt);\n    }\n\n    /**\n     * Decrease the indent level by the specified number of levels,\n     * to a minimum of 0.\n     * This simply negates the given value and passes the result to\n     * `indent`.\n     */\n    outdent(amt = 1) {      // eslint-disable-line no-magic-numbers\n        return this.indent(-amt);\n    }\n\n    /**\n     * Append the specified text to the current line.\n     *\n     * @return `this` Writer object.\n     */\n    write(text) {\n        this._ensureCurrentLine().content.push(text);\n        return this;\n    }\n\n    /**\n     * Append the specified text to the current line, and _then_\n     * start a new (empty) line.\n     *\n     * Default `text` parameter is an empty string, which has the effect\n     * of ending the current line.\n     *\n     * @return `this` Writer object.\n     */\n    writeline(text = '') {\n        this.write(text);\n        this._startNewLine();\n        return this;\n    }\n\n    /**\n     * A legacy alias for `writeline`.\n     */\n    writeLine(...args) {\n        return this.writeline(...args);\n    }\n\n    /**\n     * End the current line and a new null line after it.\n     * This is the same as calling `writeLine` with no argument.\n     *\n     * @return `this` Writer object.\n     */\n    newline() {\n        return this.writeLine();\n    }\n\n    /**\n     * End the current line and add a blank line after it,\n     * leaving the cursor on the next line after the blank line.\n     *\n     * This is the same as calling `newline` twice in a row.\n     *\n     * @return `this` Writer object.\n     */\n    blankline() {\n        return this.newline().newline();\n    }\n\n    /**\n     * Ensures that the current line is ended (with `endline`), and then\n     * adds a new line.\n     *\n     * @return `this` Writer object.\n     */\n    skipline() {\n        return this.endline().newline();\n    }\n\n    /**\n     * Ensure that if the current line is non-null, it is\n     * ended. In other words, calling this several times in a row\n     * is the same as calling it once.\n     *\n     * @return `this` Writer object.\n     */\n    endline() {\n        if (this._currentLine()) {\n            this.newline();\n        }\n        return this;\n    }\n\n    _getIndentString(level) {\n        return Array.apply(null, Array(level)).map(() => this._tab).join('');   // eslint-disable-line prefer-spread\n    }\n\n    /**\n     * Generate and return a string representing the text that has been written\n     * to the writer so far, using the current `linesep` and `tab` settings.\n     */\n    toString() {\n        return this._lines.map((line) => {\n            if (line) {\n                const {level, content} = line;\n                return `${this._getIndentString(level)}${content.join('')}`;\n            }\n            else {\n                return '';\n            }\n        }).join(this._linesep);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}
